#!/usr/bin/env  php
<?php
/*
 * OMM PHP Library
 * Copyright (c) 2022-2022. Alexandre Miguel Maia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 */

namespace OMM;

//initiate autoloader to be able to run from CLI and from code
include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';
if (isset($_composer_autoload_path)) {
    require_once $_composer_autoload_path;
} else {
    require_once __DIR__ . '/../vendor/autoload.php';
}

// call commandline task function
OMMTask::commandLineInterface($argv);

/**
 * ---------------------------------------------------------------------------------------------
 */

use Exception;
use OMM\Task\FolderRepositoryTask;

use function error_log;

/**
 * Issue Tasks for the web repository handling. Also usable from command line.
 */
class OMMTask
{

    /**
     * Passes in all commandline arguments to initiate given commands
     * @param array $arguments
     */
    public static function commandLineInterface(array $arguments): void
    {

        //clean up by removing the php script file name from the arguments
        array_shift($arguments);

        // if no arguments are given or help is requested
        $argumentCount = count($arguments);
        if($argumentCount == 0 || in_array($arguments[0],array("-?","-h","--help","-help"))){
            self::showHelp();
            return;
        }

        self::startTask($arguments, $argumentCount);
    }


    /**
     * Generates a repository xml based on the given root path
     * @param string $xmlName name and path of the repository xml
     * @param string $repositoryName name for the repository
     * @param string $repositoryRootPath root path where the mod packages are placed
     * @param bool $recursive true if the sub folders should be processed as well
     * @throws Exception
     */

    public static function generateFolderRepository(
        string $xmlName,
        string $repositoryName,
        string $repositoryRootPath,
        bool $recursive = false
    ) {

//        $classTest = FolderRepositoryTask::class;
//        $class = new ReflectionClass("OMM\TASK\FolderRepositoryTask");
//        $method = $class->getMethod("generateFolderRepository");
//        $method->invokeArgs(null,array($xmlName, $repositoryName, $repositoryRootPath, $recursive));
        FolderRepositoryTask::generateFolderRepository($xmlName, $repositoryName, $repositoryRootPath, $recursive);
    }

    protected static function showHelp(): void
    {
        echo "Command line task for the OMM web repository generator. Type only the command to get additional help\n\n";
        echo "Usage:\n";
        echo " OMMTask <command> <args>\n\n";
        echo "Commands:\n";
        echo " --help, -help, -h, -?             : Shows help on how to use this task\n";
        echo " generateFolderRepository          : Generates repository XML from a folder structure\n";
    }

    /**
     * Starts the given task if available. Shows help when not all arguments are given for the task
     * @param array $arguments
     * @param int $argumentCount
     */
    protected static function startTask(array $arguments, int $argumentCount): void
    {
        try {
            //switches between the given task from the command line
            $task = $arguments[0];
            switch ($task) {
                case "generateFolderRepository":

                    if ($argumentCount < 4) {
                        FolderRepositoryTask::showHelp();
                        return;
                    }

                    OMMTask::generateFolderRepository($arguments[1], $arguments[2], $arguments[3], $arguments[4]);
                    break;
                default:
                    error_log("Could not find a task for " . $task);
            }
        } catch (Exception $exception) {
            error_log("Error on Task: " . $exception->getMessage());
        }
    }

    /**
     *
     * @param array $arguments
     * @param int $argumentCount
     */
}
