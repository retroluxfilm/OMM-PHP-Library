#!/usr/bin/env  php
<?php
/*
 * OMM PHP Library
 * Copyright (c) 2022-2022. Alexandre Miguel Maia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 */

namespace OMM;

//initiate autoloader to be able to run from CLI and from code
include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';
if (isset($_composer_autoload_path)) {
    require_once $_composer_autoload_path;
} else {
    require_once __DIR__ . '/../vendor/autoload.php';
}

// TODO clean up command line argument description etc.
if ($argc <= 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
    echo "
    Command line task for the OMM web repository generator.

    Usage:
    OMMTask [task] [arguments]

    [task]
    --help, -help, -h, -? : Shows help on how to use this task
    generateFolderRepository : Generates repository XMl from a folder structure
";
} else {
    try {
        //switches between the given task from the command line
        $task = $argv[1];
        switch ($task) {
            case "generateFolderRepository":
                OMMTask::generateFolderRepository($argv[2], $argv[3], $argv[4]);
                break;
            default:
                error_log("Could not find a task for " . $task);
        }
    } catch (Exception $exception) {
        error_log("Error on Task: " . $exception->getMessage());
        exit();
    }
}

/**
 * ---------------------------------------------------------------------------------------------
 */

use Exception;
use OMM\Package\Package;
use OMM\Repository\RemoteRepositoryXML;

/**
 * Issue Tasks for the web repository handling. Also usable from command line.
 */
class OMMTask
{

    /**
     * Generates a repository xml based on the given root path
     * @param string $xmlName name and path of the repository xml
     * @param string $repositoryName name for the repository
     * @param string $repositoryRootPath root path where the mod packages are placed
     * @param bool $recursive true if the sub folders should be processed as well
     * @throws Exception
     */
    public static function generateFolderRepository(
        string $xmlName,
        string $repositoryName,
        string $repositoryRootPath,
        bool $recursive = false
    ) {
        // check if the root patch a valid directory
        if (!is_dir($repositoryRootPath)) {
            throw new Exception("Repository root path is not a valid directory");
        }

        $remoteRepository = new RemoteRepositoryXML($xmlName, $repositoryName, $repositoryRootPath);

        //TODO Remove this when proper checks are implemented allowing to merge etc.
        $remoteRepository->cleanAllRemotePackages();

        echo "Generate Folder Repository for: " . $repositoryRootPath . "\n";

        if ($handle = opendir($repositoryRootPath)) {
            while (false !== ($entry = readdir($handle))) {
                // exclude special folders
                if ($entry == "." || $entry == "..") {
                    continue;
                }

                if (is_dir($entry) && $recursive) {
                    //TODO implement subdirectory recursion needed. => Skipping for now
                    continue;
                }

                // skip non zip archives
                if (strcasecmp("zip",pathinfo($entry, PATHINFO_EXTENSION)) != 0) {
                    continue;
                }

                try {
                    $fullArchiveDir = $repositoryRootPath . DIRECTORY_SEPARATOR . $entry;
                    $package = new Package($fullArchiveDir);

                    // add package to remote repository
                    $remoteRepository->addRemotePackage($package);
                } catch (Exception $exception) {
                    error_log("Skipped Invalid Archive '" . $entry . "' due to the error: " . $exception->getMessage());
                }
            }
            closedir($handle);
        }

        //save changes to the remote repository
        $remoteRepository->saveXML();

        echo "Finished generating folder repository\n";
    }
}
