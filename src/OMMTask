#!/usr/bin/env  php
<?php
/**
 * Tasks to generate repository XMLs for OMM though a web backend using PHP 7.4+
 * @author Alexandre Miguel Maia (info@retrolux.de)
 * @link https://github.com/retroluxfilm //TODO add right LINK
 */


namespace OMM;

//initiate autoloader
require_once __DIR__ . '/../vendor/autoload.php';

// TODO clean up command line argument description etc.
if ($argc <= 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
    echo <<<EOT

    Command line task for the OMM web repository generator.

    Usage:
    "$argv[0]" <task> (<taskarguments>)

    <task>
    --help, -help, -h, -? : Shows help on how to use this task
    generateFolderRepository : Generates repository XMl from a folder structure
EOT;
} else {
    try {
        //switches between the given task from the command line
        $task = $argv[1];
        switch ($task) {
            case "generateFolderRepository":
                OMMTask::generateFolderRepository($argv[2], $argv[3], $argv[4]);
                break;
            default:
                error_log("Could not find a task for " . $task);
        }
    } catch (Exception $exception) {
        error_log("Error on Task: " . $exception->getMessage());
        exit();
    }
}

/**
 * ---------------------------------------------------------------------------------------------
 */

/**
 * Fallback str_ends_with function for PHP < 8.0
 */
if (!function_exists('str_ends_with')) {
    function str_ends_with(string $haystack, string $needle): bool
    {
        $needle_len = strlen($needle);
        return ($needle_len === 0 || 0 === substr_compare($haystack, $needle, -$needle_len));
    }
}

use Exception;
use OMM\Package\Package;
use OMM\Repository\RemoteRepositoryXML;

/**
 * Issue Tasks for the web repository handling. Also usable from command line.
 */
class OMMTask
{

    /**
     * Generates a repository xml based on the given root path
     * @param string $xmlName name and path of the repository xml
     * @param string $repositoryName name for the repository
     * @param string $repositoryRootPath root path where the mod packages are placed
     * @param bool $recursive true if the sub folders should be processed as well
     * @throws Exception
     */
    public static function generateFolderRepository(
        string $xmlName,
        string $repositoryName,
        string $repositoryRootPath,
        bool $recursive = false
    ) {
        // check if the root patch a valid directory
        if (!is_dir($repositoryRootPath)) {
            throw new Exception("Repository root path is not a valid directory");
        }

        $remoteRepository = new RemoteRepositoryXML($xmlName, $repositoryName, $repositoryRootPath);

        //TODO Remove this when proper checks are implemented allowing to merge etc.
        $remoteRepository->cleanAllRemotePackages();

        echo "Generate Folder Repository for: " . $repositoryRootPath . "\n";

        if ($handle = opendir($repositoryRootPath)) {
            while (false !== ($entry = readdir($handle))) {
                // exclude special folders
                if ($entry == "." || $entry == "..") {
                    continue;
                }

                if (is_dir($entry) && $recursive) {
                    //TODO implement subdirectory recursion needed. => Skipping for now
                    continue;
                }

                // skip non zip archives
                if (!str_ends_with($entry, ".zip")) {
                    continue;
                }

                try {
                    $fullArchiveDir = $repositoryRootPath . DIRECTORY_SEPARATOR . $entry;
                    $package = new Package($fullArchiveDir);

                    // add package to remote repository
                    $remoteRepository->addRemotePackage($package);
                } catch (Exception $exception) {
                    error_log("Skipped Invalid Archive '" . $entry . "' due to the error: " . $exception->getMessage());
                }
            }
            closedir($handle);
        }

        //save changes to the remote repository
        $remoteRepository->saveXML();

        echo "Finished generating folder repository\n";
    }
}
