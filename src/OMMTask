#!/usr/bin/env  php
<?php
/*
 * OMM PHP Library
 * Copyright (c) 2022-2022. Alexandre Miguel Maia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 */

namespace OMM;

//initiate autoloader to be able to run from CLI and from code
include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';
if (isset($_composer_autoload_path)) {
    require_once $_composer_autoload_path;
} else {
    require_once __DIR__ . '/../vendor/autoload.php';
}


// call commandline task function
OMMTask::commandLineInterface($argv);

/**
 * ---------------------------------------------------------------------------------------------
 */

use Composer\InstalledVersions;
use Exception;
use OMM\Task\GenerateFolderRepositoryTask;

use function error_log;

/**
 * Issue Tasks for the web repository handling. Also usable from command line.
 */
class OMMTask
{

    /**
     * Passes in all commandline arguments to initiate given commands
     * @param array $arguments
     */
    public static function commandLineInterface(array $arguments): void
    {
         // if no arguments are given or help is requested
        $argumentCount = count($arguments);
        if($argumentCount == 1 || in_array($arguments[1],array("-?","-h","--help","-help"))){
            self::showHelp();
            return;
        }

        self::startTask($arguments, $argumentCount);
    }

    protected static function showHelp(): void
    {
        echo "Command line task for the OMM web repository generator. Type only the command to get additional help\n";
        echo "Version:" . self::getVersion() . "\n\n";
        echo "Usage:\n";
        echo " OMMTask <command> <args>\n\n";
        echo "Commands:\n";
        echo " --help, -help, -h, -?             : Shows help on how to use this task\n";
        echo " generateFolderRepository          : Generates repository XML from a folder structure\n";
    }

    /**
     * Starts the given task if available. Shows help when not all arguments are given for the task
     * @param array $arguments
     * @param int $argumentCount
     */
    protected static function startTask(array $arguments, int $argumentCount): void
    {
        try {

            //get task name (lower case)
            $task = strtolower($arguments[1]);

            //get arguments for the task
            $taskArguments = array_slice($arguments,2);

            //switches between the given task from the command line
            switch ($task) {
                case strtolower(GenerateFolderRepositoryTask::$commandName):
                    GenerateFolderRepositoryTask::runTask($taskArguments);
                    break;
                default:
                    error_log("Could not find a task for " . $task);
            }
        } catch (Exception $exception) {
            error_log("Error on Task: " . $exception->getMessage());
        }
    }

    /**
     * Returns the currently installed version of this library through composer
     * @return string
     */
    public static function getVersion()
    {

        // fetch package name directly from composer.json the library uses
        $composerConfig = file_get_contents("../composer.json");
        if($composerConfig != false){
            $composerJson = json_decode($composerConfig);
            if($composerJson != NULL) {
                $packageName = $composerJson->name;
                return $packageName . " " . InstalledVersions::getPrettyVersion($packageName) . " " . InstalledVersions::getReference($packageName);
            }
        }

        return -1;

    }
}
